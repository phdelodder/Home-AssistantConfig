- platform: template
  sensors:
    temperature_degrees:
      friendly_name: 'Temperature'
      value_template: '{{states("input_number.temperature") | float(0)}}'

- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'time_utc'

- platform: template
  sensors:

    # Zone Times - templated on history_stats sensors
    zone1_time_today:
      friendly_name: Zone 1 total watering time today
      value_template: >
        {{ states('sensor.greenhouse_valve_1_history_today') | float(0) * 60 | round }}
      unit_of_measurement: minutes
      icon_template: mdi:water

    zone2_time_today:
      friendly_name: Zone 2 total watering time today
      value_template: >
        {{ states('sensor.greenhouse_valve_2_history_today') | float(0) * 60 | round }}
      unit_of_measurement: minutes
      icon_template: mdi:water
        
    zone3_time_today:
      friendly_name: Zone 3 total watering time today
      value_template: >
        {{ states('sensor.greenhouse_valve_3_history_today') | float(0) * 60 | round }}
      unit_of_measurement: minutes
      icon_template: mdi:water
        
    zone4_time_today:
      friendly_name: Zone 4 total watering time today
      value_template: >
        {{ states('sensor.greenhouse_valve_4_history_today') | float(0) * 60 | round }}
      unit_of_measurement: minutes
      icon_template: mdi:water

# History sensors
# Zone Times
- platform: history_stats
  name: greenhouse_valve_1_history_today
  entity_id: switch.greenhouse_valve_1
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
- platform: history_stats
  name: greenhouse_valve_1_history_yesterday
  entity_id: switch.greenhouse_valve_1
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    hours: 24
- platform: history_stats
  name: greenhouse_valve_1_history_week
  entity_id: switch.greenhouse_valve_1
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 7
- platform: history_stats
  name: greenhouse_valve_1_history_month
  entity_id: switch.greenhouse_valve_1
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 30
- platform: history_stats
  name: greenhouse_valve_1_history_year
  entity_id: switch.greenhouse_valve_1
  state: 'on'
  type: time
  start: '{{ now().replace(month=1).replace(day=1).replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
- platform: history_stats
  name: greenhouse_valve_1_history_alltime
  entity_id: switch.greenhouse_valve_1
  state: 'on'
  type: time
  start: '{{ 0 }}'
  end: '{{ now() }}'
- platform: template
  sensors:
    greenhouse_valve_1_stats:
      icon_template: >-
        {% if is_state('switch.greenhouse_valve_1', 'on') %}
          mdi:chart-line-stacked
        {% else %}
          mdi:chart-line
        {% endif %}
      value_template: >-
        {{ state_attr('sensor.greenhouse_valve_1_history_today', 'value') }}
      attribute_templates:
        today: >-
          {{ state_attr('sensor.greenhouse_valve_1_history_today', 'value') }}
        yesterday: >-
          {{ state_attr('sensor.greenhouse_valve_1_history_yesterday', 'value') }}
        week: >-
          {{ state_attr('sensor.greenhouse_valve_1_history_week', 'value') }}
        month: >-
          {{ state_attr('sensor.greenhouse_valve_1_history_month', 'value') }}
        year: >-
          {{ states('sensor.greenhouse_valve_1_history_year') + state_attr('sensor.greenhouse_valve_1_history_year', 'unit_of_measurement') }}
        all: >-
          {{ states('sensor.greenhouse_valve_1_history_alltime') + state_attr('sensor.greenhouse_valve_1_history_year', 'unit_of_measurement') }}

- platform: history_stats
  name: greenhouse_valve_2_history_today
  entity_id: switch.greenhouse_valve_2
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
- platform: history_stats
  name: greenhouse_valve_2_history_yesterday
  entity_id: switch.greenhouse_valve_2
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    hours: 24
- platform: history_stats
  name: greenhouse_valve_2_history_week
  entity_id: switch.greenhouse_valve_2
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 7
- platform: history_stats
  name: greenhouse_valve_2_history_month
  entity_id: switch.greenhouse_valve_2
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 30
- platform: history_stats
  name: greenhouse_valve_2_history_year
  entity_id: switch.greenhouse_valve_2
  state: 'on'
  type: time
  start: '{{ now().replace(month=1).replace(day=1).replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
- platform: history_stats
  name: greenhouse_valve_2_history_alltime
  entity_id: switch.greenhouse_valve_2
  state: 'on'
  type: time
  start: '{{ 0 }}'
  end: '{{ now() }}'
- platform: template
  sensors:
    greenhouse_valve_2_stats:
      icon_template: >-
        {% if is_state('switch.greenhouse_valve_2', 'on') %}
          mdi:chart-line-stacked
        {% else %}
          mdi:chart-line
        {% endif %}
      value_template: >-
        {{ state_attr('sensor.greenhouse_valve_2_history_today', 'value') }}
      attribute_templates:
        today: >-
          {{ state_attr('sensor.greenhouse_valve_2_history_today', 'value') }}
        yesterday: >-
          {{ state_attr('sensor.greenhouse_valve_2_history_yesterday', 'value') }}
        week: >-
          {{ state_attr('sensor.greenhouse_valve_2_history_week', 'value') }}
        month: >-
          {{ state_attr('sensor.greenhouse_valve_2_history_month', 'value') }}
        year: >-
          {{ states('sensor.greenhouse_valve_2_history_year') + state_attr('sensor.greenhouse_valve_2_history_year', 'unit_of_measurement') }}
        all: >-
          {{ states('sensor.greenhouse_valve_2_history_alltime') + state_attr('sensor.greenhouse_valve_2_history_year', 'unit_of_measurement') }}

- platform: history_stats
  name: greenhouse_valve_3_history_today
  entity_id: switch.greenhouse_valve_3
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
- platform: history_stats
  name: greenhouse_valve_3_history_yesterday
  entity_id: switch.greenhouse_valve_3
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    hours: 24
- platform: history_stats
  name: greenhouse_valve_3_history_week
  entity_id: switch.greenhouse_valve_3
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 7
- platform: history_stats
  name: greenhouse_valve_3_history_month
  entity_id: switch.greenhouse_valve_3
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 30
- platform: history_stats
  name: greenhouse_valve_3_history_year
  entity_id: switch.greenhouse_valve_3
  state: 'on'
  type: time
  start: '{{ now().replace(month=1).replace(day=1).replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
- platform: history_stats
  name: greenhouse_valve_3_history_alltime
  entity_id: switch.greenhouse_valve_3
  state: 'on'
  type: time
  start: '{{ 0 }}'
  end: '{{ now() }}'
- platform: template
  sensors:
    greenhouse_valve_3_stats:
      icon_template: >-
        {% if is_state('switch.greenhouse_valve_3', 'on') %}
          mdi:chart-line-stacked
        {% else %}
          mdi:chart-line
        {% endif %}
      value_template: >-
        {{ state_attr('sensor.greenhouse_valve_3_history_today', 'value') }}
      attribute_templates:
        today: >-
          {{ state_attr('sensor.greenhouse_valve_3_history_today', 'value') }}
        yesterday: >-
          {{ state_attr('sensor.greenhouse_valve_3_history_yesterday', 'value') }}
        week: >-
          {{ state_attr('sensor.greenhouse_valve_3_history_week', 'value') }}
        month: >-
          {{ state_attr('sensor.greenhouse_valve_3_history_month', 'value') }}
        year: >-
          {{ states('sensor.greenhouse_valve_3_history_year') + state_attr('sensor.greenhouse_valve_3_history_year', 'unit_of_measurement') }}
        all: >-
          {{ states('sensor.greenhouse_valve_3_history_alltime') + state_attr('sensor.greenhouse_valve_3_history_year', 'unit_of_measurement') }}

- platform: history_stats
  name: greenhouse_valve_4_history_today
  entity_id: switch.greenhouse_valve_4
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
- platform: history_stats
  name: greenhouse_valve_4_history_yesterday
  entity_id: switch.greenhouse_valve_4
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    hours: 24
- platform: history_stats
  name: greenhouse_valve_4_history_week
  entity_id: switch.greenhouse_valve_4
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 7
- platform: history_stats
  name: greenhouse_valve_4_history_month
  entity_id: switch.greenhouse_valve_4
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 30
- platform: history_stats
  name: greenhouse_valve_4_history_year
  entity_id: switch.greenhouse_valve_4
  state: 'on'
  type: time
  start: '{{ now().replace(month=1).replace(day=1).replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
- platform: history_stats
  name: greenhouse_valve_4_history_alltime
  entity_id: switch.greenhouse_valve_4
  state: 'on'
  type: time
  start: '{{ 0 }}'
  end: '{{ now() }}'
- platform: template
  sensors:
    greenhouse_valve_4_stats:
      icon_template: >-
        {% if is_state('switch.greenhouse_valve_4', 'on') %}
          mdi:chart-line-stacked
        {% else %}
          mdi:chart-line
        {% endif %}
      value_template: >-
        {{ state_attr('sensor.greenhouse_valve_4_history_today', 'value') }}
      attribute_templates:
        today: >-
          {{ state_attr('sensor.greenhouse_valve_4_history_today', 'value') }}
        yesterday: >-
          {{ state_attr('sensor.greenhouse_valve_4_history_yesterday', 'value') }}
        week: >-
          {{ state_attr('sensor.greenhouse_valve_4_history_week', 'value') }}
        month: >-
          {{ state_attr('sensor.greenhouse_valve_4_history_month', 'value') }}
        year: >-
          {{ states('sensor.greenhouse_valve_4_history_year') + state_attr('sensor.greenhouse_valve_4_history_year', 'unit_of_measurement') }}
        all: >-
          {{ states('sensor.greenhouse_valve_4_history_alltime') + state_attr('sensor.greenhouse_valve_4_history_year', 'unit_of_measurement') }}
- platform: history_stats
  name: greenhouse_valve_5_history_today
  entity_id: switch.greenhouse_valve_5
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
- platform: history_stats
  name: greenhouse_valve_5_history_yesterday
  entity_id: switch.greenhouse_valve_5
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    hours: 25
- platform: history_stats
  name: greenhouse_valve_5_history_week
  entity_id: switch.greenhouse_valve_5
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 7
- platform: history_stats
  name: greenhouse_valve_5_history_month
  entity_id: switch.greenhouse_valve_5
  state: 'on'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 30
- platform: history_stats
  name: greenhouse_valve_5_history_year
  entity_id: switch.greenhouse_valve_5
  state: 'on'
  type: time
  start: '{{ now().replace(month=1).replace(day=1).replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
- platform: history_stats
  name: greenhouse_valve_5_history_alltime
  entity_id: switch.greenhouse_valve_5
  state: 'on'
  type: time
  start: '{{ 0 }}'
  end: '{{ now() }}'
- platform: template
  sensors:
    greenhouse_valve_5_stats:
      icon_template: >-
        {% if is_state('switch.greenhouse_valve_5', 'on') %}
          mdi:chart-line-stacked
        {% else %}
          mdi:chart-line
        {% endif %}
      value_template: >-
        {{ state_attr('sensor.greenhouse_valve_5_history_today', 'value') }}
      attribute_templates:
        today: >-
          {{ state_attr('sensor.greenhouse_valve_5_history_today', 'value') }}
        yesterday: >-
          {{ state_attr('sensor.greenhouse_valve_5_history_yesterday', 'value') }}
        week: >-
          {{ state_attr('sensor.greenhouse_valve_5_history_week', 'value') }}
        month: >-
          {{ state_attr('sensor.greenhouse_valve_5_history_month', 'value') }}
        year: >-
          {{ states('sensor.greenhouse_valve_5_history_year') + state_attr('sensor.greenhouse_valve_5_history_year', 'unit_of_measurement') }}
        all: >-
          {{ states('sensor.greenhouse_valve_5_history_alltime') + state_attr('sensor.greenhouse_valve_5_history_year', 'unit_of_measurement') }}

- platform: template
  sensors:
    vacuum_status:
      friendly_name: Status
      value_template: 'Status: {{ state_attr("vacuum.dalek", "status") }}'
      icon_template: >
        {% set val =  state_attr("vacuum.dalek", "status")  %}
        {% if val == 'Charging' %}
          mdi:battery-charging
        {% elif val == 'Cleaning' %}
          mdi:move-resize
        {% elif val == 'Returning home' %}
          mdi:keyboard-return
        {% elif val == 'Idle' %}
          mdi:dots-horizontal
        {% elif val == 'Paused' %}
          mdi:pause-circle
        {% else %}
          mdi:help-circle
        {% endif %}
    vacuum_fan_speed:
      value_template: 'Mode: {{ state_attr("vacuum.dalek", "fan_speed") }}'
      icon_template: 'mdi:speedometer'
    vacuum_battery:
      friendly_name: Vacuum Battery
      value_template: 'Battery: {{ state_attr("vacuum.dalek", "battery_level") }}'
      unit_of_measurement: '%'
      icon_template: '{{ state_attr("vacuum.dalek", "battery_icon") }}'
    vacuum_cleaning_time:
      friendly_name: Time of Last Cycle
      value_template: >-
        {% set s = states('sensor.dalek_last_clean_duration')|int(0) %}
        {{ '%02d:%02d' % ((s/3600)|int(0), (s%3600)/60) }}
      icon_template: 'mdi:timer'
    vacuum_cleaned_area:
      friendly_name: Area of Last Cycle
      unit_of_measurement: 'm ²'
      value_template: '{{ state_attr("vacuum.dalek", "cleaned_area") }}'
      icon_template: 'mdi:ruler'
    vacuum_cleanmainbrush:
      friendly_name: Replace main brush
      unit_of_measurement: 'h'
      value_template: >-
        Main Brush: 
        {% set s = states('sensor.dalek_main_brush_left')|int(0) %}
        {{ '%02d:%02d' % ((s/3600)|int(0), (s%3600)/60) }}
      icon_template: 'mdi:screwdriver'
    vacuum_cleansidebrush:
      friendly_name: Replace side brush
      unit_of_measurement: 'h'
      value_template: >-
        Side Brush: 
        {% set s = states('sensor.dalek_side_brush_left')|int(0) %}
        {{ '%02d:%02d' % ((s/3600)|int(0), (s%3600)/60) }}
      icon_template: 'mdi:screwdriver'
    vacuum_cleanfilter:
      friendly_name: Replace filter
      unit_of_measurement: 'h'
      value_template: >-
        Filter: 
        {% set s = states('sensor.dalek_filter_left')|int(0) %}
        {{ '%02d:%02d' % ((s/3600)|int(0), (s%3600)/60) }}
      icon_template: 'mdi:screwdriver'
    vacuum_sensordirtyleft:
      friendly_name: Replace filter
      unit_of_measurement: 'h'
      value_template: >-
        Filter: 
        {% set s = states('sensor.dalek_sensor_dirty_left')|int(0) %}
        {{ '%02d:%02d' % ((s/3600)|int(0), (s%3600)/60) }}
      icon_template: 'mdi:screwdriver'
    vacuum_do_not_disturb:
      friendly_name: Do Not Disturb
      value_template: '{{ state_attr("vacuum.dalek", "do_not_disturb") }}'
      icon_template: >
        {% set val =  state_attr("vacuum.dalek", "do_not_disturb")  %}
        {% if val == 'on' %}
          mdi:do-not-disturb
        {% else %}
          mdi:do-not-disturb-off
        {% endif %}
    vacuum_operation:
      value_template: 'Operation'
    vacuum_accessories:
      value_template: 'Maintenance'

- platform: template
  sensors:
    next_run_zone_1:
      friendly_name: 'Next Run'
      value_template: >-
        {% if states('input_select.zone_1_schedule') != 'Zone Off' %}
          {{ (as_timestamp(states.input_datetime.zone_1_next_run_time.state)) | timestamp_custom("%a %d %h at %H:%M") }}
        {% else %}
          None
        {% endif %}
    next_run_zone_2:
      friendly_name: 'Next Run'
      value_template: >-
        {% if states('input_select.zone_2_schedule') != 'Zone Off' %}
          {{ (as_timestamp(states.input_datetime.zone_2_next_run_time.state)) | timestamp_custom("%a %d %h at %H:%M") }}
        {% else %}
          None
        {% endif %}
    next_run_zone_3:
      friendly_name: 'Next Run'
      value_template: >-
        {% if states('input_select.zone_3_schedule') != 'Zone Off' %}
          {{ (as_timestamp(states.input_datetime.zone_3_next_run_time.state)) | timestamp_custom("%a %d %h at %H:%M") }}
        {% else %}
          None
        {% endif %}
    next_run_zone_4:
      friendly_name: 'Next Run'
      value_template: >-
        {% if states('input_select.zone_4_schedule') != 'Zone Off' %}
          {{ (as_timestamp(states.input_datetime.zone_4_next_run_time.state)) | timestamp_custom("%a %d %h at %H:%M") }}
        {% else %}
          None
        {% endif %}

#- platform: zoneminder

- platform: afvalbeheer
  wastecollector: RecycleApp
  resources:
    - gft
    - groenafval
    - grofvuil
    - kga mobiel
    - papier
    - pmd
    - restafval
  postcode: !secret ophaalkalender_postcode
  streetname: !secret ophaalkalender_streetname
  upcomingsensor: 1
  builtinicons: 1
  
- platform: integration
  source: sensor.water_pump_flow_rate
  name: "Water Pump Usage"
  unit_time: "h"
  method: "left"

- platform: template
  sensors:
    energy_price_kwh:
      friendly_name: 'Energy Price/kWh'
      value_template: "{{ states('input_number.energy_price') | float (0) / 100 }}"
      unit_of_measurement: "€/kWh"
    gas_price_kwh:
      friendly_name: 'Gas Price/kWh'
      value_template: "{{ states('input_number.gas_price') | float (0) / 100 }}"
      unit_of_measurement: "€/kWh"
    current_consumption:
      value_template: >
        {{
          (
          states('sensor.shellyem3_c45bbe797bfc_channel_a_power') | float(0) +
          states('sensor.shellyem3_c45bbe797bfc_channel_b_power') | float(0) +
          states('sensor.shellyem3_c45bbe797bfc_channel_c_power') | float(0)
          )
        }}
      unit_of_measurement: "w"
      icon_template: mdi:home-lightning-bolt

- platform: statistics
  name: "Current Consumption max over last 24 hours"
  entity_id: sensor.current_consumption
  state_characteristic: value_max
  max_age:
    hours: 24

- platform: statistics
  name: "Current Consumption min over last 24 hours"
  entity_id: sensor.current_consumption
  state_characteristic: value_min
  max_age:
    hours: 24

- platform: template
  sensors:
    house_mode:
      friendly_name: House Mode
      value_template: >-
        {% if is_state('input_boolean.kids_home_alone', 'on') %}
          kids home alone
        {% elif is_state('binary_sensor.guest_mode', 'on') %}
          guest
        {% elif is_state('binary_sensor.night_mode', 'on') %}
          night
        {% elif is_state('binary_sensor.no_one_home', 'off') %}
          home
        {% elif is_state('input_boolean.vacation_mode', 'on') %}
          vacation
        {% else %}
          away
        {% endif %}
      icon_template: >-
        {% if is_state('input_boolean.kids_home_alone', 'on') %}
          mdi:home-circle-outline
        {% elif is_state('binary_sensor.guest_mode', 'on') %}
          mdi:alpha-g
        {% elif is_state('binary_sensor.night_mode', 'on') %}
          mdi:weather-night
        {% elif is_state('binary_sensor.no_one_home', 'off') %}
          mdi:home
        {% elif is_state('input_boolean.vacation_mode', 'on') %}
          mdi:beach
        {% else %}
          mdi:home-outline
        {% endif %}
    oprit_last_motion:
      friendly_name: Oprit Last Motion
      value_template: >-
        {{ (as_timestamp(states.input_datetime.oprit_last_motion.state)) | timestamp_custom('%a %d %h at %H:%M') }}
    oprit_last_motion_event:
      friendly_name: Oprit Last Motion Event
      value_template: >-
        {{ "%02d" % (states('input_number.oprit_last_motion_event') |int (0) ) }}
    oprit_last_cctv_motion:
      friendly_name: Oprit Last CCTV Motion
      value_template: >-
        {{ (as_timestamp(states.input_datetime.oprit_last_cctv_motion.state)) | timestamp_custom('%a %d %h at %H:%M') }}
    oprit_last_cctv_motion_event:
      friendly_name: Oprit Last CCTV Motion Event
      value_template: >-
        {{ "%02d" % (states('input_number.oprit_last_cctv_motion_event') |int (0) ) }}

- platform: template
  sensors:
    operatingstate:
      value_template: "{{ state_attr('climate.huis', 'hvac_action') }}"
      attribute_templates:
          device_id: "{{ state_attr('binary_sensor.01_223036_schema', 'schema').system.heating_control }}"
    
    fc_heat_demand:
      friendly_name: "Boiler Demand"
      unit_of_measurement: "%"
      value_template: >-
        {{ state_attr('climate.huis', 'relay_demands').FC * 100 }}
      attribute_templates:
          device_id: "{{ state_attr('binary_sensor.01_223036_schema', 'schema').system.heating_control }}"

    fc_relay_demand:
      friendly_name: "heating_control (relay_demand)"
      unit_of_measurement: "%"
      value_template: >-
        {{ state_attr('climate.huis', 'relay_demands').FC * 100 }}
      attribute_templates:
        device_id: "{{ state_attr('binary_sensor.01_223036_schema', 'schema').system.heating_control }}"

- platform: history_stats
  name: Verwarmen Vandaag
  entity_id: sensor.operatingstate
  state: 'heating'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'

- platform: history_stats
  name: Verwarmen Gisteren
  entity_id: sensor.operatingstate
  state: 'heating'
  type: time
  end: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  duration:
    hours: 24

- platform: history_stats
  name: Verwarmen 2 Dagen Geleden
  entity_id: sensor.operatingstate
  state: 'heating'
  type: time
  end: '{{ as_timestamp( now().replace(hour=0).replace(minute=0).replace(second=0) ) - 86400 }}'
  duration:
    hours: 24

- platform: history_stats
  name: Verwarmen Voorbij Week
  entity_id: sensor.operatingstate
  state: 'heating'
  type: time
  end: '{{ now().replace(hour=0, minute=0, second=0) }}'
  duration:
    days: 7

- platform: template
  sensors:
    ibbq_probe_1_grill_alert_temp:
      value_template: >-
        {% if (states('sensor.ibbq_temperature_probe_1') |int (0) ) < (states('input_number.grill_alert_low') |int (0) ) or (states('sensor.ibbq_temperature_probe_1') |int (0) )  > (states('input_number.grill_alert_high') |int (0) ) %}
          Alert
        {% else %}
          Normal
        {% endif %}
      friendly_name: Grill (Probe 1) Target Alert 
      icon_template: >-
        {% if (states('sensor.ibbq_temperature_probe_1') |int (0) ) < (states('input_number.grill_alert_low') |int (0) ) or (states('sensor.ibbq_temperature_probe_1') |int (0) )  > (states('input_number.grill_alert_high') |int (0) ) %}
          mdi:alert-circle
        {% else %}
          mdi:alert-circle-check
        {% endif %}
      
    ibbq_probe_2_target_alert_temp:
      value_template: >-
        {% if (states('sensor.ibbq_temperature_probe_2') |int (0) ) >= (states('input_number.grill_probe_2_target') |int (0) ) %}
          Alert
        {% else %}
          Normal
        {% endif %}
      friendly_name: Probe 2 Target Alert
      icon_template: >-
        {% if (states('sensor.ibbq_temperature_probe_2') |int (0) ) >= (states('input_number.grill_probe_2_target') |int (0) ) %}
          mdi:alert-circle
        {% else %}
          mdi:alert-circle-check
        {% endif %}
      
    ibbq_probe_3_target_alert_temp:
      value_template: >-
        {% if (states('sensor.ibbq_temperature_probe_3') |int (0) ) >= (states('input_number.grill_probe_3_target') |int (0) ) %}
          Alert
        {% else %}
          Normal
        {% endif %}
      friendly_name: Probe 3 Target Alert
      icon_template: >-
        {% if (states('sensor.ibbq_temperature_probe_3') |int (0) ) >= (states('input_number.grill_probe_3_target') |int (0) ) %}
          mdi:alert-circle
        {% else %}
          mdi:alert-circle-check
        {% endif %}
      
    ibbq_probe_4_target_alert_temp:
      value_template: >-
        {% if (states('sensor.ibbq_temperature_probe_4') |int (0) ) >= (states('input_number.grill_probe_4_target') |int (0) ) %}
          Alert
        {% else %}
          Normal
        {% endif %}
      friendly_name: Probe 4 Target Alert
      icon_template: >-
        {% if (states('sensor.ibbq_temperature_probe_4') |int (0) ) >= (states('input_number.grill_probe_4_target') |int (0) ) %}
          mdi:alert-circle
        {% else %}
          mdi:alert-circle-check
        {% endif %}

- platform: min_max
  name: "Buiten Gemiddelde Temperatuur"
  type: mean
  round_digits: 1
  entity_ids:
    - sensor.motion_voordeur_temperature
    - sensor.achterdeur_buiten_temperature