- platform: nest

- platform: template
  sensors:
    temperature_degrees:
      friendly_name: 'Temperature'
      value_template: '{{states("input_number.temperature") | float }}'

- platform: fritzbox_netmonitor

- platform: template
  sensors: 
    external_ip:
      friendly_name: "External IP"
      value_template: "{{ states.sensor.fritz_netmonitor.attributes.external_ip }}"

- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'time_utc'

- platform: template
  sensors:

    # Zone Times - templated on history_stats sensors
    zone1_time_today:
      friendly_name: Zone 1 total watering time today
      value_template: >
        {{ states('sensor.zone1_time') | float * 60 | round }}
      unit_of_measurement: minutes
      icon_template: mdi:water

    zone2_time_today:
      friendly_name: Zone 2 total watering time today
      value_template: >
        {{ states('sensor.zone2_time') | float * 60 | round }}
      unit_of_measurement: minutes
      icon_template: mdi:water
        
    zone3_time_today:
      friendly_name: Zone 3 total watering time today
      value_template: >
        {{ states('sensor.zone3_time') | float * 60 | round }}
      unit_of_measurement: minutes
      icon_template: mdi:water
        
    zone4_time_today:
      friendly_name: Zone 4 total watering time today
      value_template: >
        {{ states('sensor.zone3_time') | float * 60 | round }}
      unit_of_measurement: minutes
      icon_template: mdi:water

# History sensors
# Zone Times
- platform: history_stats
  name: zone1_time
  entity_id: switch.greenhouse_valve_1
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'

- platform: history_stats
  name: zone2_time
  entity_id: switch.greenhouse_valve_2
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'

- platform: history_stats
  name: zone3_time
  entity_id: switch.greenhouse_valve_3
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'

- platform: history_stats
  name: zone4_time
  entity_id: switch.greenhouse_valve_4
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'

- platform: template
  sensors:
    afval_ophaal_dag:
      friendly_name: Afval Ophaal Dag
      value_template: "{{ strptime(states('sensor.ophaal_kalender_datum'), '%Y-%m-%d').strftime('%A, %d/%m/%Y') }}"
    afval_ophaal_type:
      friendly_name: Afval Ophaal Type
      value_template: "{{states('sensor.ophaal_kalender_titel') }}"
      icon_template: "{%- if is_state('sensor.ophaal_kalender_titel', 'Restafval') %}mdi:recycle{%- elif is_state('sensor.ophaal_kalender_titel', 'Groenafval') %}mdi:leaf{%- elif is_state('sensor.ophaal_kalender_titel', 'PMD') %}mdi:delete-variant{% else%}mdi:cancel{%- endif %}"

- platform: template
  sensors:
    vacuum_status:
      friendly_name: Status
      entity_id:
        - vacuum.xiaomi_vacuum_cleaner
      value_template: 'Status: {{ states.vacuum.xiaomi_vacuum_cleaner.attributes.status }}'
      icon_template: >
        {% set val =  states.vacuum.xiaomi_vacuum_cleaner.attributes.status  %}
        {% if val == 'Charging' %}
          mdi:battery-charging
        {% elif val == 'Cleaning' %}
          mdi:move-resize
        {% elif val == 'Returning home' %}
          mdi:keyboard-return
        {% elif val == 'Idle' %}
          mdi:dots-horizontal
        {% elif val == 'Paused' %}
          mdi:pause-circle
        {% else %}
          mdi:help-circle
        {% endif %}
    vacuum_fan_speed:
      friendly_name: Fan Speed
      entity_id:
        - vacuum.xiaomi_vacuum_cleaner
      value_template: 'Mode: {{ states.vacuum.xiaomi_vacuum_cleaner.attributes.fan_speed }}'
      icon_template: 'mdi:speedometer'
    vacuum_battery:
      friendly_name: Vacuum Battery
      entity_id:
        - vacuum.xiaomi_vacuum_cleaner
      value_template: 'Battery: {{ states.vacuum.xiaomi_vacuum_cleaner.attributes.battery_level }}'
      unit_of_measurement: '%'
      icon_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.battery_icon }}'
    vacuum_cleaning_time:
      friendly_name: Time of Last Cycle
      entity_id:
        - vacuum.xiaomi_vacuum_cleaner
      value_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.cleaning_time }}'
      icon_template: 'mdi:timer'
    vacuum_cleaned_area:
      friendly_name: Area of Last Cycle
      unit_of_measurement: 'm Â²'
      entity_id:
        - vacuum.xiaomi_vacuum_cleaner
      value_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.cleaned_area }}'
      icon_template: 'mdi:ruler'
    vacuum_cleanmainbrush:
      friendly_name: Replace main brush
      unit_of_measurement: 'h'
      entity_id:
        - vacuum.xiaomi_vacuum_cleaner
      value_template: 'Main Brush: {{ states.vacuum.xiaomi_vacuum_cleaner.attributes.main_brush_left }}'
      icon_template: 'mdi:screwdriver'
    vacuum_cleansidebrush:
      friendly_name: Replace side brush
      unit_of_measurement: 'h'
      entity_id:
        - vacuum.xiaomi_vacuum_cleaner
      value_template: 'Side brush: {{ states.vacuum.xiaomi_vacuum_cleaner.attributes.side_brush_left }}'
      icon_template: 'mdi:screwdriver'
    vacuum_cleanfilter:
      friendly_name: Replace filter
      unit_of_measurement: 'h'
      entity_id:
        - vacuum.xiaomi_vacuum_cleaner
      value_template: 'Filter: {{ states.vacuum.xiaomi_vacuum_cleaner.attributes.filter_left }}'
      icon_template: 'mdi:screwdriver'
    vacuum_sensordirtyleft:
      friendly_name: Replace filter
      unit_of_measurement: 'h'
      entity_id:
        - vacuum.xiaomi_vacuum_cleaner
      value_template: 'Sensor: {{ states.vacuum.xiaomi_vacuum_cleaner.attributes.sensor_dirty_left }}'
      icon_template: 'mdi:screwdriver'
    vacuum_do_not_disturb:
      friendly_name: Do Not Disturb
      entity_id:
        - vacuum.xiaomi_vacuum_cleaner
      value_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.do_not_disturb }}'
      icon_template: >
        {% set val =  states.vacuum.xiaomi_vacuum_cleaner.attributes.do_not_disturb  %}
        {% if val == 'on' %}
          mdi:do-not-disturb
        {% else %}
          mdi:do-not-disturb-off
        {% endif %}
    vacuum_operation:
      value_template: 'Operation'
    vacuum_accessories:
      value_template: 'Maintenance'

- platform: synologydsm
  host: 192.168.0.10
  username: !secret synology_username
  password: !secret synology_password
  port: 5000
  ssl: false
  monitored_conditions:
    - 'cpu_total_load'
    - 'memory_real_usage'
    - 'network_up'
    - 'network_down'
    - 'disk_status'
    - 'disk_temp'
    - 'volume_percentage_used'

- platform: template
  sensors:
    next_run_zone_1:
      friendly_name: 'Next Run'
      value_template: >-
        {% if states('input_select.zone_1_schedule') != 'Zone Off' %}
          {{ (as_timestamp(states.input_datetime.zone_1_next_run_time.state)) | timestamp_custom("%a %d %h at %H:%M") }}
        {% else %}
          None
        {% endif %}
    next_run_zone_2:
      friendly_name: 'Next Run'
      value_template: >-
        {% if states('input_select.zone_2_schedule') != 'Zone Off' %}
          {{ (as_timestamp(states.input_datetime.zone_2_next_run_time.state)) | timestamp_custom("%a %d %h at %H:%M") }}
        {% else %}
          None
        {% endif %}
    next_run_zone_3:
      friendly_name: 'Next Run'
      value_template: >-
        {% if states('input_select.zone_3_schedule') != 'Zone Off' %}
          {{ (as_timestamp(states.input_datetime.zone_3_next_run_time.state)) | timestamp_custom("%a %d %h at %H:%M") }}
        {% else %}
          None
        {% endif %}
    next_run_zone_4:
      friendly_name: 'Next Run'
      value_template: >-
        {% if states('input_select.zone_4_schedule') != 'Zone Off' %}
          {{ (as_timestamp(states.input_datetime.zone_4_next_run_time.state)) | timestamp_custom("%a %d %h at %H:%M") }}
        {% else %}
          None
        {% endif %}

- platform: google_travel_time
  api_key: !secret google_travel_time-api_key
  origin: person.philippe
  destination: zone.home
  scan_interval: 900
  name: "Philippe to Home"
  options: 
    mode: driving

